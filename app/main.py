from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from .core.config import settings
from .core.extractor import PNCPExtractor
from .models.schemas import (
    ConfigScheduler, 
    ExtrairDiaRequest, 
    EditalResponse, 
    StatusSchedulerResponse,
    HealthResponse
)


# Configura√ß√£o FastAPI
app = FastAPI(
    title=settings.API_TITLE,
    description=settings.API_DESCRIPTION,
    version=settings.API_VERSION
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Sistema de Scheduler
class SchedulerSimples:
    def __init__(self, extrator):
        self.extrator = extrator
        self.scheduler = AsyncIOScheduler()
        self.config = {"ativo": False, "hora": "06:00"}
    
    def configurar(self, ativo, hora):
        self.config = {"ativo": ativo, "hora": hora}
        
        if self.scheduler.get_job("extracao_diaria"):
            self.scheduler.remove_job("extracao_diaria")
        
        if ativo:
            h, m = hora.split(":")
            self.scheduler.add_job(
                self.executar_automatico,
                CronTrigger(hour=int(h), minute=int(m), timezone="America/Sao_Paulo"),
                id="extracao_diaria"
            )
            
            if not self.scheduler.running:
                self.scheduler.start()
    
    async def executar_automatico(self):
        print("ü§ñ EXECU√á√ÉO AUTOM√ÅTICA INICIADA")
        await self.extrator.executar_extracao_dia()
    
    def get_status(self):
        job = self.scheduler.get_job("extracao_diaria")
        proxima_execucao = job.next_run_time.isoformat() if job and job.next_run_time else None
        
        return {
            "ativo": self.config["ativo"],
            "proxima_execucao": proxima_execucao,
            "ultima_execucao": None,  # TODO: implementar tracking
            "configuracao": self.config,
            "estatisticas": {"total_extraidos": 0, "total_erros": 0}  # TODO: implementar
        }


# Inst√¢ncias globais
extrator = PNCPExtractor()
scheduler = SchedulerSimples(extrator)


# ========================================
# ENDPOINTS
# ========================================

@app.get("/", 
         summary="üè† P√°gina inicial",
         description="Informa√ß√µes gerais da API e endpoints dispon√≠veis")
async def root():
    return {
        "message": f"{settings.API_TITLE}",
        "version": settings.API_VERSION,
        "status": "üü¢ Online",
        "endpoints": {
            "1": "POST /configurar-scheduler - Configura extra√ß√£o autom√°tica",
            "2": "POST /executar-agora - Executa extra√ß√£o imediatamente",
            "3": "POST /extrair-dia-anterior - Extrai editais do dia anterior"
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc"
        },
        "exemplo_uso": {
            "configurar_scheduler": {
                "ativo": True,
                "hora": "06:00",
                "salvar_arquivos": True
            }
        }
    }


@app.get("/health", 
         response_model=HealthResponse,
         summary="üè• Health Check",
         description="Verifica o status da API e conex√µes com servi√ßos externos")
async def health():
    # Testa conex√£o com Supabase
    supabase_status = "disconnected"
    try:
        result = extrator.supabase.table("editais_completos").select("id").limit(1).execute()
        supabase_status = "connected"
    except:
        supabase_status = "error"
    
    return HealthResponse(
        status="üü¢ healthy" if supabase_status == "connected" else "üü° degraded",
        timestamp=datetime.now().isoformat(),
        services={
            "supabase": f"üü¢ {supabase_status}" if supabase_status == "connected" else f"üî¥ {supabase_status}",
            "selenium": "üü¢ dispon√≠vel",
            "storage_bucket": settings.STORAGE_BUCKET
        },
        environment={
            "python_version": "3.11+",
            "fastapi_version": "0.104+",
            "supabase_configured": settings.is_configured()
        }
    )


@app.post("/configurar-scheduler",
          response_model=EditalResponse,
          summary="‚öôÔ∏è Configurar Scheduler",
          description="Configura a extra√ß√£o autom√°tica di√°ria de editais")
async def configurar_scheduler(config: ConfigScheduler):
    """1Ô∏è‚É£ Configura extra√ß√£o autom√°tica di√°ria"""
    try:
        scheduler.configurar(config.ativo, config.hora)
        
        return EditalResponse(
            success=True,
            message=f"Scheduler {'ativado' if config.ativo else 'desativado'}",
            data={
                "configuracao": config.dict(),
                "status": scheduler.get_status()
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/scheduler/status",
         response_model=StatusSchedulerResponse,
         summary="üìä Status do Scheduler",
         description="Retorna o status atual do scheduler")
async def status_scheduler():
    """Retorna status do scheduler"""
    try:
        status = scheduler.get_status()
        
        return StatusSchedulerResponse(
            ativo=status["ativo"],
            proxima_execucao=status["proxima_execucao"],
            ultima_execucao=status["ultima_execucao"],
            configuracao=status["configuracao"],
            estatisticas=status["estatisticas"]
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/executar-agora",
          response_model=EditalResponse,
          summary="‚ñ∂Ô∏è Executar Agora",
          description="Executa a extra√ß√£o do dia anterior imediatamente")
async def executar_agora():
    """2Ô∏è‚É£ Executa extra√ß√£o do dia anterior imediatamente"""
    try:
        # Executa em background
        task = asyncio.create_task(extrator.executar_extracao_dia())
        
        return EditalResponse(
            success=True,
            message="Extra√ß√£o iniciada em background",
            data={
                "data_extracao": str((datetime.now() - timedelta(days=1)).date()),
                "timestamp": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/extrair-dia-anterior",
          response_model=EditalResponse,
          summary="üìÖ Extrair Dia Anterior",
          description="Extrai editais do dia anterior (ou data espec√≠fica)")
async def extrair_dia_anterior(request: ExtrairDiaRequest):
    """3Ô∏è‚É£ Extrai editais do dia anterior (ou data espec√≠fica)"""
    try:
        data_extracao = request.data
        if not data_extracao:
            data_extracao = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        
        resultado = await extrator.executar_extracao_dia(data_extracao)
        
        return EditalResponse(
            success=resultado["success"],
            message=resultado["message"],
            data=resultado,
            tempo_execucao=resultado.get("tempo_execucao")
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/estatisticas",
         summary="üìä Estat√≠sticas Gerais",
         description="Retorna estat√≠sticas gerais da base de dados")
async def estatisticas_gerais():
    """Retorna estat√≠sticas gerais"""
    try:
        # Total de editais
        total_result = extrator.supabase.table("editais_completos")\
            .select("id", count="exact")\
            .execute()
        
        # Editais recentes
        data_limite = (datetime.now() - timedelta(days=7)).isoformat()
        recentes_result = extrator.supabase.table("editais_completos")\
            .select("id", count="exact")\
            .gte("created_at", data_limite)\
            .execute()
        
        return EditalResponse(
            success=True,
            message="Estat√≠sticas gerais",
            data={
                "total_editais": total_result.count or 0,
                "editais_ultimos_7_dias": recentes_result.count or 0,
                "scheduler": scheduler.get_status()["estatisticas"],
                "ultima_atualizacao": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# Inicializa√ß√£o
@app.on_event("startup")
async def startup_event():
    """Eventos de inicializa√ß√£o"""
    print("üöÄ PNCP Extrator iniciado!")
    print(f"üìä Configura√ß√µes: {settings.is_configured()}")


@app.on_event("shutdown")
async def shutdown_event():
    """Eventos de finaliza√ß√£o"""
    if scheduler.scheduler.running:
        scheduler.scheduler.shutdown()
    print("üëã PNCP Extrator finalizado!")