from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import StreamingResponse
import asyncio
import os
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from .core.config import settings
from .core.extractor import PNCPExtractor
from .models.schemas import (
    ConfigScheduler, 
    ExtrairDiaRequest, 
    EditalResponse, 
    StatusSchedulerResponse,
    HealthResponse
)


# Configura√ß√£o FastAPI
app = FastAPI(
    title=settings.API_TITLE,
    description=settings.API_DESCRIPTION,
    version=settings.API_VERSION
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir arquivos est√°ticos
import os
static_dir = os.path.join(os.path.dirname(__file__), "..", "public")
app.mount("/static", StaticFiles(directory=static_dir), name="static")


# Sistema de Scheduler
class SchedulerSimples:
    def __init__(self, extrator):
        self.extrator = extrator
        self.scheduler = AsyncIOScheduler()
        self.config = {"ativo": False, "hora": "06:00", "ultima_execucao": None}
        self.scheduler_id = 1
        self._config_carregada = False
    
    def _carregar_config_banco(self):
        """Carrega configura√ß√£o do scheduler do banco"""
        try:
            result = self.extrator.supabase.table("scheduler_horario")\
                .select("*")\
                .eq("id", self.scheduler_id)\
                .execute()
            
            if result.data:
                config = result.data[0]
                hora_exec = str(config['hora_execucao'])[:5]
                self.config = {
                    "ativo": config.get('ativo', False),
                    "hora": hora_exec,
                    "ultima_execucao": config.get('ultima_execucao')
                }
                print(f"‚úÖ Config carregada do banco: {hora_exec}, Ativo: {config.get('ativo')}")
            else:
                # Se n√£o existe, cria com valores padr√£o
                self.config = {"ativo": False, "hora": "06:00", "ultima_execucao": None}
                print("‚ö†Ô∏è Config n√£o encontrada no banco, usando padr√£o")
        except Exception as e:
            print(f"‚ùå Erro ao carregar config do banco: {e}")
            # Usa valores padr√£o em caso de erro
            self.config = {"ativo": False, "hora": "06:00", "ultima_execucao": None}
    
    def _salvar_config_banco(self):
        """Salva configura√ß√£o do scheduler no banco"""
        try:
            hora_time = f"{self.config['hora']}:00"
            
            # Tenta atualizar
            result = self.extrator.supabase.table("scheduler_horario")\
                .update({
                    "hora_execucao": hora_time,
                    "ativo": self.config['ativo'],
                    "ultima_execucao": self.config.get('ultima_execucao'),
                    "updated_at": datetime.now().isoformat()
                })\
                .eq("id", self.scheduler_id)\
                .execute()
            
            if not result.data:
                # Se n√£o existe, cria
                self.extrator.supabase.table("scheduler_horario").insert({
                    "id": self.scheduler_id,
                    "hora_execucao": hora_time,
                    "ativo": self.config['ativo'],
                    "ultima_execucao": self.config.get('ultima_execucao')
                }).execute()
            
            print(f"‚úÖ Config salva no banco: {hora_time}, Ativo: {self.config['ativo']}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar config no banco: {e}")
            raise e
    
    def _registrar_execucao_inicio(self):
        """Registra in√≠cio de execu√ß√£o"""
        try:
            result = self.extrator.supabase.table("scheduler_execucoes").insert({
                "scheduler_id": self.scheduler_id,
                "data_inicio": datetime.now().isoformat(),
                "status": "em_andamento"
            }).execute()
            
            if result.data:
                return result.data[0]['id']
        except Exception as e:
            print(f"Erro ao registrar in√≠cio: {e}")
        return None
    
    def _registrar_execucao_fim(self, execucao_id, resultado):
        """Registra fim de execu√ß√£o"""
        try:
            self.extrator.supabase.table("scheduler_execucoes").update({
                "data_fim": datetime.now().isoformat(),
                "status": "concluido" if resultado.get('success') else "erro",
                "total_encontrados": resultado.get('total_encontrados', 0),
                "total_novos": resultado.get('total_novos', 0),
                "total_atualizados": resultado.get('total_atualizados', 0),
                "total_erros": resultado.get('total_erros', 0),
                "tempo_execucao": resultado.get('tempo_execucao', 0),
                "mensagem": resultado.get('message', ''),
                "detalhes": resultado
            }).eq("id", execucao_id).execute()
        except Exception as e:
            print(f"Erro ao registrar fim: {e}")
    
    def inicializar_scheduler(self):
        """Inicializa o scheduler carregando configura√ß√£o do banco"""
        try:
            print("üîß Inicializando scheduler...")
            
            # Carrega config do banco
            self._carregar_config_banco()
            self._config_carregada = True
            
            # Se estiver ativo, configura o job
            if self.config.get('ativo', False):
                print(f"‚úÖ Scheduler ativo - configurando execu√ß√£o para {self.config['hora']}")
                self._configurar_job()
            else:
                print("‚ö†Ô∏è Scheduler inativo")
            
            # Inicia o scheduler se n√£o estiver rodando
            if not self.scheduler.running:
                self.scheduler.start()
                print("üöÄ Scheduler iniciado!")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar scheduler: {e}")
            # Continua mesmo com erro
    
    def configurar(self, ativo, hora):
        try:
            # Carrega config do banco na primeira vez
            if not self._config_carregada:
                self._carregar_config_banco()
                self._config_carregada = True
            
            self.config = {"ativo": ativo, "hora": hora, "ultima_execucao": self.config.get("ultima_execucao")}
            
            # Salva no banco
            self._salvar_config_banco()
            
            # Configura o job
            self._configurar_job()
            
            print(f"‚úÖ Scheduler configurado: Ativo={ativo}, Hora={hora}")
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar scheduler: {e}")
            raise e
    
    def _configurar_job(self):
        """Configura o job de extra√ß√£o autom√°tica"""
        try:
            # Remove job existente
            if self.scheduler.get_job("extracao_diaria"):
                self.scheduler.remove_job("extracao_diaria")
            
            if self.config.get('ativo', False):
                hora = self.config.get('hora', '06:00')
                h, m = hora.split(":")
                
                print(f"Configurando scheduler para {hora} (Brasil)")
                print(f"Timezone: America/Sao_Paulo")
                
                self.scheduler.add_job(
                    self.executar_automatico,
                    CronTrigger(hour=int(h), minute=int(m), timezone="America/Sao_Paulo"),
                    id="extracao_diaria",
                    replace_existing=True
                )
                
                # Mostra pr√≥xima execu√ß√£o
                job = self.scheduler.get_job("extracao_diaria")
                if job and hasattr(job, 'next_run_time') and job.next_run_time:
                    print(f"Pr√≥xima execu√ß√£o: {job.next_run_time}")
                else:
                    print("‚ö†Ô∏è Job criado mas pr√≥xima execu√ß√£o n√£o dispon√≠vel")
            else:
                print("Scheduler desativado")
                
        except Exception as e:
            print(f"‚ùå Erro ao configurar job: {e}")
            raise e
    
    async def executar_automatico(self):
        print("EXECU√á√ÉO AUTOM√ÅTICA INICIADA (m√©todo inteligente)")
        
        # Registra in√≠cio
        execucao_id = self._registrar_execucao_inicio()
        
        # Atualiza √∫ltima execu√ß√£o no banco
        try:
            self.extrator.supabase.table("scheduler_horario").update({
                "ultima_execucao": datetime.now().isoformat()
            }).eq("id", self.scheduler_id).execute()
        except:
            pass
        
        # Executa extra√ß√£o INTELIGENTE (apenas dia anterior)
        resultado = await self.extrator.executar_extracao_inteligente(
            dias_retroativos=1,
            salvar_arquivos=False
        )
        
        # Registra fim
        if execucao_id:
            self._registrar_execucao_fim(execucao_id, resultado)
        
        return resultado
    
    def get_status(self):
        try:
            job = self.scheduler.get_job("extracao_diaria")
            
            # Informa√ß√µes detalhadas
            status = {
                "ativo": self.config.get("ativo", False),
                "configuracao": self.config,
                "scheduler_running": self.scheduler.running,
                "job_exists": job is not None,
                "proxima_execucao": None,
                "proxima_execucao_brasil": None,
                "ultima_execucao": None,
                "hora_atual_utc": datetime.utcnow().isoformat(),
                "hora_atual_brasil": datetime.now().isoformat(),
                "estatisticas": {"total_extraidos": 0, "total_erros": 0}
            }
            
            if job and hasattr(job, 'next_run_time') and job.next_run_time:
                status["proxima_execucao"] = job.next_run_time.isoformat()
                # Converte para hor√°rio do Brasil para visualiza√ß√£o
                import pytz
                brasil_tz = pytz.timezone('America/Sao_Paulo')
                proxima_brasil = job.next_run_time.astimezone(brasil_tz)
                status["proxima_execucao_brasil"] = proxima_brasil.strftime("%d/%m/%Y %H:%M:%S %Z")
            
            # Busca √∫ltima execu√ß√£o
            status["ultima_execucao"] = self.config.get("ultima_execucao")
            
            return status
        except Exception as e:
            print(f"Erro ao obter status do scheduler: {e}")
            return {
                "ativo": False,
                "configuracao": {},
                "scheduler_running": False,
                "job_exists": False,
                "proxima_execucao": None,
                "proxima_execucao_brasil": None,
                "ultima_execucao": None,
                "hora_atual_utc": datetime.utcnow().isoformat(),
                "hora_atual_brasil": datetime.now().isoformat(),
                "estatisticas": {"total_extraidos": 0, "total_erros": 0},
                "erro": str(e)
            }


# Inst√¢ncias globais (lazy initialization)
extrator = None
scheduler = None

# Sistema de eventos em tempo real
extraction_events = {}
active_extractions = {}

def get_extrator():
    """Inicializa extrator apenas quando necess√°rio"""
    global extrator
    if extrator is None:
        extrator = PNCPExtractor()
    return extrator

def get_scheduler():
    """Inicializa scheduler apenas quando necess√°rio"""
    global scheduler
    if scheduler is None:
        scheduler = SchedulerSimples(get_extrator())
    return scheduler

def generate_task_id():
    """Gera ID √∫nico para tarefa de extra√ß√£o"""
    import uuid
    return str(uuid.uuid4())[:8]

def add_extraction_event(task_id, event_type, message, data=None):
    """Adiciona evento de extra√ß√£o"""
    global extraction_events
    if task_id not in extraction_events:
        extraction_events[task_id] = []
    
    event = {
        "timestamp": datetime.now().isoformat(),
        "type": event_type,  # info, success, warning, error, progress
        "message": message,
        "data": data or {}
    }
    extraction_events[task_id].append(event)
    
    # Mant√©m apenas √∫ltimos 100 eventos por tarefa
    if len(extraction_events[task_id]) > 100:
        extraction_events[task_id] = extraction_events[task_id][-100:]

def get_extraction_events(task_id):
    """Retorna eventos de uma tarefa"""
    return extraction_events.get(task_id, [])

def clear_extraction_events(task_id=None):
    """Limpa eventos de extra√ß√£o"""
    global extraction_events
    if task_id:
        extraction_events.pop(task_id, None)
    else:
        extraction_events.clear()

async def executar_extracao_com_eventos(extrator, task_id, dias_retroativos=1, salvar_arquivos=False):
    """Executa extra√ß√£o com feedback em tempo real"""
    try:
        # Atualiza status
        active_extractions[task_id]["status"] = "buscando_editais"
        
        # Busca editais
        add_extraction_event(task_id, "info", f"üìÖ Buscando editais dos √∫ltimos {dias_retroativos} dia(s)...")
        
        data_final = datetime.now().date()
        data_inicial = data_final - timedelta(days=dias_retroativos)
        
        add_extraction_event(task_id, "info", f"üìä Per√≠odo: {data_inicial} a {data_final}")
        
        # Busca editais para cada dia
        todos_editais = []
        for dia_offset in range(dias_retroativos, -1, -1):
            data_extracao = data_final - timedelta(days=dia_offset)
            add_extraction_event(task_id, "info", f"üîç Buscando editais de {data_extracao}...")
            
            editais_encontrados = extrator.buscar_editais_recentes(
                data_filtro=data_extracao,
                max_paginas=50,
                limit_por_pagina=100
            )
            
            if editais_encontrados:
                todos_editais.extend(editais_encontrados)
                add_extraction_event(task_id, "success", f"‚úÖ Encontrados {len(editais_encontrados)} editais em {data_extracao}")
            else:
                add_extraction_event(task_id, "warning", f"‚ö†Ô∏è Nenhum edital encontrado em {data_extracao}")
        
        if not todos_editais:
            add_extraction_event(task_id, "warning", "‚ö†Ô∏è Nenhum edital encontrado no per√≠odo")
            return {
                "success": False,
                "message": "Nenhum edital encontrado no per√≠odo",
                "total_encontrados": 0,
                "total_novos": 0,
                "total_atualizados": 0,
                "total_erros": 0,
                "tempo_execucao": 0
            }
        
        # Atualiza status
        active_extractions[task_id]["status"] = "processando_editais"
        active_extractions[task_id]["total_editais"] = len(todos_editais)
        
        add_extraction_event(task_id, "info", f"üöÄ Iniciando processamento de {len(todos_editais)} editais...")
        
        # Processa cada edital
        novos_total = []
        atualizados_total = []
        erros_total = []
        
        for i, edital_basico in enumerate(todos_editais, 1):
            try:
                id_pncp = edital_basico.get("id_pncp")
                if not id_pncp:
                    continue
                
                # Atualiza progresso
                progresso = (i / len(todos_editais)) * 100
                add_extraction_event(task_id, "progress", f"üìã Processando {i}/{len(todos_editais)}: {id_pncp}", {
                    "progresso": round(progresso, 1),
                    "atual": i,
                    "total": len(todos_editais),
                    "id_pncp": id_pncp
                })
                
                # Verifica se j√° existe
                existing = extrator.supabase.table("editais_completos")\
                    .select("id, ultima_atualizacao, data_coleta")\
                    .eq("id_pncp", id_pncp)\
                    .execute()
                
                edital_existente = None
                deve_extrair = True
                
                if existing.data:
                    edital_existente = existing.data[0]
                    ultima_coleta = edital_existente.get("data_coleta")
                    
                    if ultima_coleta:
                        data_coleta = datetime.fromisoformat(ultima_coleta.replace('Z', '+00:00'))
                        hoje = datetime.now()
                        
                        if data_coleta.date() == hoje.date():
                            add_extraction_event(task_id, "info", f"‚è≠Ô∏è {id_pncp} j√° foi coletado hoje - pulando")
                            deve_extrair = False
                        else:
                            add_extraction_event(task_id, "info", f"üîÑ {id_pncp} ser√° atualizado")
                    else:
                        add_extraction_event(task_id, "info", f"üîÑ {id_pncp} ser√° atualizado (sem data de coleta)")
                else:
                    add_extraction_event(task_id, "info", f"‚ú® {id_pncp} √© um novo edital")
                
                # Extrai se necess√°rio
                if deve_extrair:
                    add_extraction_event(task_id, "info", f"üîç Extraindo dados completos de {id_pncp}...")
                    
                    dados_completos = extrator.extrair_edital_completo_hibrido(id_pncp, salvar_arquivos=salvar_arquivos)
                    
                    if dados_completos:
                        add_extraction_event(task_id, "success", f"‚úÖ Dados extra√≠dos de {id_pncp}")
                        
                        # Salva no banco
                        supabase_id = extrator.salvar_supabase(dados_completos)
                        if supabase_id:
                            if edital_existente:
                                atualizados_total.append(id_pncp)
                                add_extraction_event(task_id, "success", f"üíæ {id_pncp} atualizado (ID: {supabase_id})")
                            else:
                                novos_total.append(id_pncp)
                                add_extraction_event(task_id, "success", f"üíæ {id_pncp} inserido (ID: {supabase_id})")
                        else:
                            add_extraction_event(task_id, "error", f"‚ùå Falha ao salvar {id_pncp}")
                            erros_total.append({"id_pncp": id_pncp, "erro": "Falha ao salvar no Supabase"})
                    else:
                        add_extraction_event(task_id, "error", f"‚ùå Falha na extra√ß√£o de {id_pncp}")
                        erros_total.append({"id_pncp": id_pncp, "erro": "Falha na extra√ß√£o de dados"})
                
                await asyncio.sleep(0.2)  # Pausa entre editais
                
            except Exception as e:
                add_extraction_event(task_id, "error", f"‚ùå Erro ao processar {id_pncp}: {str(e)}")
                erros_total.append({"id_pncp": id_pncp, "erro": str(e)})
        
        # Resultado final
        add_extraction_event(task_id, "success", f"üéâ Processamento conclu√≠do!", {
            "total_encontrados": len(todos_editais),
            "total_novos": len(novos_total),
            "total_atualizados": len(atualizados_total),
            "total_erros": len(erros_total)
        })
        
        return {
            "success": True,
            "message": f"Extra√ß√£o conclu√≠da: {len(novos_total)} novos, {len(atualizados_total)} atualizados, {len(erros_total)} erros",
            "total_encontrados": len(todos_editais),
            "total_novos": len(novos_total),
            "total_atualizados": len(atualizados_total),
            "total_erros": len(erros_total),
            "tempo_execucao": 0,  # Ser√° calculado pelo extrator
            "editais_novos": novos_total,
            "editais_atualizados": atualizados_total,
            "erros": erros_total
        }
        
    except Exception as e:
        add_extraction_event(task_id, "error", f"‚ùå Erro geral na extra√ß√£o: {str(e)}")
        raise e


# ========================================
# ENDPOINTS
# ========================================

@app.get("/", 
         summary="P√°gina inicial",
         description="Informa√ß√µes gerais da API e endpoints dispon√≠veis")
async def root():
    return {
        "message": f"{settings.API_TITLE}",
        "version": settings.API_VERSION,
        "status": "Online",
        "fluxo_recomendado": {
            "1_primeira_vez": "POST /executar-historico (extrai √∫ltimos 15 dias)",
            "2_configurar": "POST /configurar-scheduler (ativa extra√ß√£o di√°ria)",
            "3_automatico": "Scheduler roda √†s 06:00 diariamente"
        },
        "endpoints_principais": {
            "historico": "POST /executar-historico - Extrai 15 dias (primeira execu√ß√£o)",
            "agora": "POST /executar-agora - Extrai dia anterior (teste)",
            "scheduler": "POST /configurar-scheduler - Configura execu√ß√£o autom√°tica",
            "status": "GET /scheduler/status - Status do scheduler",
            "execucoes": "GET /scheduler/execucoes - Hist√≥rico de execu√ß√µes"
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc"
        },
        "interface_web": "/dashboard",
        "estrategia": "M√©todo inteligente: n√£o duplica, atualiza apenas mudan√ßas"
    }

@app.get("/dashboard")
async def dashboard():
    """Serve a interface web do dashboard"""
    from fastapi.responses import FileResponse
    import os
    html_path = os.path.join(os.path.dirname(__file__), "..", "public", "index.html")
    return FileResponse(html_path)


@app.get("/health", 
         response_model=HealthResponse,
         summary="Health Check",
         description="Verifica o status da API e conex√µes com servi√ßos externos")
async def health():
    # Testa conex√£o com Supabase
    supabase_status = "disconnected"
    try:
        ext = get_extrator()
        result = ext.supabase.table("editais_completos").select("id").limit(1).execute()
        supabase_status = "connected"
    except:
        supabase_status = "error"
    
    return HealthResponse(
        status="healthy" if supabase_status == "connected" else " degraded",
        timestamp=datetime.now().isoformat(),
        services={
            "supabase": f" {supabase_status}" if supabase_status == "connected" else f"{supabase_status}",
            "selenium": " dispon√≠vel",
            "storage_bucket": settings.STORAGE_BUCKET
        },
        environment={
            "python_version": "3.11+",
            "fastapi_version": "0.104+",
            "supabase_configured": settings.is_configured()
        }
    )


@app.post("/configurar-scheduler",
          response_model=EditalResponse,
          summary="‚öôÔ∏è Configurar Scheduler",
          description="Configura a extra√ß√£o autom√°tica di√°ria de editais")
async def configurar_scheduler(config: ConfigScheduler):
    """Configura extra√ß√£o autom√°tica di√°ria"""
    try:
        print(f"üîß Configurando scheduler: Ativo={config.ativo}, Hora={config.hora}")
        
        sch = get_scheduler()
        sch.configurar(config.ativo, config.hora)
        
        status = sch.get_status()
        
        return EditalResponse(
            success=True,
            message=f"Scheduler {'ativado' if config.ativo else 'desativado'}",
            data={
                "configuracao": config.dict(),
                "status": status
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/scheduler/status",
         response_model=StatusSchedulerResponse,
         summary="Status do Scheduler",
         description="Retorna o status atual do scheduler")
async def status_scheduler():
    """Retorna status do scheduler"""
    try:
        sch = get_scheduler()
        status = sch.get_status()
        
        return StatusSchedulerResponse(
            ativo=status["ativo"],
            proxima_execucao=status["proxima_execucao"],
            ultima_execucao=status["ultima_execucao"],
            configuracao=status["configuracao"],
            estatisticas=status["estatisticas"]
        )
        
    except Exception as e:
        print(f"‚ùå Erro ao obter status do scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/executar-historico",
          response_model=EditalResponse,
          summary="Extra√ß√£o Hist√≥rica (15 dias)",
          description="Extrai TODOS os editais dos √∫ltimos 15 dias (primeira execu√ß√£o)")
async def executar_historico():
    """Extrai editais dos √∫ltimos 15 dias - USE NA PRIMEIRA VEZ"""
    task_id = generate_task_id()
    
    try:
        # Marca extra√ß√£o como ativa
        active_extractions[task_id] = {
            "tipo": "executar_historico",
            "inicio": datetime.now().isoformat(),
            "status": "iniciando"
        }
        
        add_extraction_event(task_id, "info", "üöÄ Iniciando extra√ß√£o hist√≥rica (15 dias)...")
        
        ext = get_extrator()
        add_extraction_event(task_id, "info", "‚úÖ Extrator inicializado com sucesso")
        
        add_extraction_event(task_id, "info", "üîç Iniciando busca de editais hist√≥ricos...")
        
        # Executa extra√ß√£o com eventos
        resultado = await executar_extracao_com_eventos(
            ext, task_id, dias_retroativos=15, salvar_arquivos=True
        )
        
        add_extraction_event(task_id, "success", f"üéâ Extra√ß√£o hist√≥rica conclu√≠da!", {
            "total_encontrados": resultado.get("total_encontrados", 0),
            "total_novos": resultado.get("total_novos", 0),
            "total_atualizados": resultado.get("total_atualizados", 0),
            "total_erros": resultado.get("total_erros", 0),
            "tempo_execucao": resultado.get("tempo_execucao", 0)
        })
        
        # Remove da lista de extra√ß√µes ativas
        active_extractions.pop(task_id, None)
        
        return EditalResponse(
            success=resultado["success"],
            message=resultado["message"],
            data={**resultado, "task_id": task_id},
            tempo_execucao=resultado.get("tempo_execucao")
        )
        
    except Exception as e:
        add_extraction_event(task_id, "error", f"‚ùå Erro na extra√ß√£o hist√≥rica: {str(e)}")
        active_extractions.pop(task_id, None)
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/executar-agora",
          response_model=EditalResponse,
          summary="Executar Agora (1 dia)",
          description="Executa a extra√ß√£o do dia anterior imediatamente (m√©todo inteligente)")
async def executar_agora():
    """Executa extra√ß√£o do dia anterior (teste r√°pido)"""
    task_id = generate_task_id()
    
    try:
        # Marca extra√ß√£o como ativa
        active_extractions[task_id] = {
            "tipo": "executar_agora",
            "inicio": datetime.now().isoformat(),
            "status": "iniciando"
        }
        
        add_extraction_event(task_id, "info", "üöÄ Iniciando extra√ß√£o do dia anterior...")
        
        ext = get_extrator()
        add_extraction_event(task_id, "info", "‚úÖ Extrator inicializado com sucesso")
        
        add_extraction_event(task_id, "info", "üîç Iniciando busca de editais...")
        
        # Executa extra√ß√£o com eventos
        resultado = await executar_extracao_com_eventos(
            ext, task_id, dias_retroativos=1, salvar_arquivos=True
        )
        
        add_extraction_event(task_id, "success", f"üéâ Extra√ß√£o conclu√≠da com sucesso!", {
            "total_encontrados": resultado.get("total_encontrados", 0),
            "total_novos": resultado.get("total_novos", 0),
            "total_atualizados": resultado.get("total_atualizados", 0),
            "total_erros": resultado.get("total_erros", 0),
            "tempo_execucao": resultado.get("tempo_execucao", 0)
        })
        
        # Remove da lista de extra√ß√µes ativas
        active_extractions.pop(task_id, None)
        
        return EditalResponse(
            success=resultado["success"],
            message=resultado["message"],
            data={**resultado, "task_id": task_id},
            tempo_execucao=resultado.get("tempo_execucao")
        )
        
    except Exception as e:
        add_extraction_event(task_id, "error", f"‚ùå Erro na extra√ß√£o: {str(e)}")
        active_extractions.pop(task_id, None)
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/scheduler/execucoes",
         summary="Hist√≥rico de Execu√ß√µes",
         description="Retorna hist√≥rico das execu√ß√µes do scheduler")
async def historico_execucoes(limit: int = 10):
    """Retorna √∫ltimas execu√ß√µes do scheduler"""
    try:
        ext = get_extrator()
        result = ext.supabase.table("scheduler_execucoes")\
            .select("*")\
            .order("data_inicio", desc=True)\
            .limit(limit)\
            .execute()
        
        return EditalResponse(
            success=True,
            message=f"√öltimas {limit} execu√ß√µes",
            data={
                "execucoes": result.data or [],
                "total": len(result.data) if result.data else 0
            }
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/estatisticas",
         summary="Estat√≠sticas Gerais",
         description="Retorna estat√≠sticas gerais da base de dados")
async def estatisticas_gerais():
    """Retorna estat√≠sticas gerais"""
    try:
        ext = get_extrator()
        sch = get_scheduler()
        
        # Total de editais
        total_result = ext.supabase.table("editais_completos")\
            .select("id", count="exact")\
            .execute()
        
        # Editais recentes
        data_limite = (datetime.now() - timedelta(days=7)).isoformat()
        recentes_result = ext.supabase.table("editais_completos")\
            .select("id", count="exact")\
            .gte("created_at", data_limite)\
            .execute()
        
        return EditalResponse(
            success=True,
            message="Estat√≠sticas gerais",
            data={
                "total_editais": total_result.count or 0,
                "editais_ultimos_7_dias": recentes_result.count or 0,
                "scheduler": {"total_extraidos": 0, "total_erros": 0},
                "ultima_atualizacao": datetime.now().isoformat()
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/editais", summary="Listar Editais", description="Retorna lista de editais extra√≠dos")
async def listar_editais(limit: int = 20, offset: int = 0):
    """Retorna lista de editais"""
    try:
        ext = get_extrator()
        
        result = ext.supabase.table("editais_completos")\
            .select("id, id_pncp, edital, modalidade, valor, orgao, situacao, data_divulgacao_pncp, created_at, total_itens, total_anexos, total_historico, itens, anexos, historico, cnpj_orgao, ano, numero, local, objeto, link_licitacao")\
            .order("created_at", desc=True)\
            .range(offset, offset + limit - 1)\
            .execute()
        
        return {
            "editais": result.data,
            "total": len(result.data),
            "limit": limit,
            "offset": offset
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/editais/{id_pncp}")
async def buscar_edital_individual(id_pncp: str):
    """Retorna dados completos de um edital espec√≠fico"""
    try:
        ext = get_extrator()
        
        result = ext.supabase.table("editais_completos")\
            .select("*")\
            .eq("id_pncp", id_pncp)\
            .execute()
        
        if not result.data:
            raise HTTPException(status_code=404, detail="Edital n√£o encontrado")
        
        edital = result.data[0]
        
        return {
            "success": True,
            "data": edital,
            "message": "Edital encontrado com sucesso"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/editais/{id_pncp}/documentos")
async def listar_documentos_edital(id_pncp: str):
    """Retorna lista de documentos do edital"""
    try:
        ext = get_extrator()
        
        result = ext.supabase.table("editais_completos")\
            .select("anexos, id_pncp")\
            .eq("id_pncp", id_pncp)\
            .execute()
        
        if not result.data:
            raise HTTPException(status_code=404, detail="Edital n√£o encontrado")
        
        edital = result.data[0]
        anexos = edital.get("anexos", [])
        
        documentos = []
        if anexos:
            for anexo in anexos:
                documentos.append({
                    "nome": anexo.get("nome", "Documento"),
                    "url": anexo.get("url", ""),
                    "tamanho": anexo.get("tamanho", "N/A"),
                    "tipo": anexo.get("tipo", "application/octet-stream")
                })
        
        return {
            "id_pncp": id_pncp,
            "documentos": documentos,
            "total": len(documentos)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/editais/{id_pncp}/download/{documento_id}")
async def download_documento(id_pncp: str, documento_id: int):
    """Baixa um documento espec√≠fico do edital"""
    try:
        ext = get_extrator()
        
        result = ext.supabase.table("editais_completos")\
            .select("anexos")\
            .eq("id_pncp", id_pncp)\
            .execute()
        
        if not result.data:
            raise HTTPException(status_code=404, detail="Edital n√£o encontrado")
        
        edital = result.data[0]
        anexos = edital.get("anexos", [])
        
        if documento_id >= len(anexos):
            raise HTTPException(status_code=404, detail="Documento n√£o encontrado")
        
        documento = anexos[documento_id]
        
        if documento.get("url"):
            return {
                "success": True,
                "url": documento["url"],
                "nome": documento.get("nome", "documento"),
                "tamanho": documento.get("tamanho", "N/A")
            }
        else:
            raise HTTPException(status_code=404, detail="Documento n√£o dispon√≠vel para download")
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/extracao/progresso/{task_id}")
async def obter_progresso_extracao(task_id: str):
    """Obt√©m progresso da extra√ß√£o em tempo real"""
    try:
        # Por enquanto retorna status b√°sico
        # Futuramente implementaremos WebSocket ou Server-Sent Events
        return {
            "task_id": task_id,
            "status": "em_andamento",
            "progresso": 0,
            "total_editais": 0,
            "processados": 0,
            "novos": 0,
            "atualizados": 0,
            "erros": 0,
            "logs": []
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/extracao/events/{task_id}")
async def obter_eventos_extracao(task_id: str):
    """Server-Sent Events para feedback em tempo real da extra√ß√£o"""
    async def gerar_eventos():
        # Envia eventos existentes primeiro
        eventos_existentes = get_extraction_events(task_id)
        for evento in eventos_existentes:
            yield f"data: {json.dumps(evento)}\n\n"
        
        # Monitora novos eventos
        ultimo_evento = len(eventos_existentes)
        while True:
            await asyncio.sleep(0.5)  # Verifica a cada 500ms
            
            eventos_atuais = get_extraction_events(task_id)
            
            # Se h√° novos eventos, envia
            if len(eventos_atuais) > ultimo_evento:
                for evento in eventos_atuais[ultimo_evento:]:
                    yield f"data: {json.dumps(evento)}\n\n"
                ultimo_evento = len(eventos_atuais)
            
            # Se a extra√ß√£o terminou, para o loop
            if task_id not in active_extractions:
                break
    
    return StreamingResponse(gerar_eventos(), media_type="text/event-stream", headers={
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Cache-Control"
    })

@app.get("/extracao/logs/{task_id}")
async def obter_logs_extracao(task_id: str):
    """Stream de logs da extra√ß√£o em tempo real (legado)"""
    async def gerar_logs():
        eventos = get_extraction_events(task_id)
        for evento in eventos:
            yield f"data: [{evento['type'].upper()}] {evento['message']}\n\n"
            await asyncio.sleep(0.1)
    
    return StreamingResponse(gerar_logs(), media_type="text/plain")


# Inicializa√ß√£o
@app.on_event("startup")
async def startup_event():
    """Eventos de inicializa√ß√£o"""
    print("PNCP Extrator iniciado!")
    print(f"Ambiente: {os.getenv('ENVIRONMENT', 'development')}")
    
    # Validar configura√ß√µes
    from .core.config import settings
    try:
        settings.validate_config()
    except Exception as e:
        print(f"ERRO de configuracao: {e}")
        print("Verifique o arquivo .env")
        exit(1)
    
    # Inicializar scheduler
    try:
        print("Inicializando scheduler...")
        scheduler = get_scheduler()
        scheduler.inicializar_scheduler()
        print("Scheduler inicializado com sucesso!")
    except Exception as e:
        print(f"Erro ao inicializar scheduler: {e}")
    
    print("API pronta para receber requisi√ß√µes")


@app.on_event("shutdown")
async def shutdown_event():
    """Eventos de finaliza√ß√£o"""
    global scheduler
    if scheduler and scheduler.scheduler.running:
        scheduler.scheduler.shutdown()
    print("PNCP Extrator finalizado!")